@model List<ITHelpDesk_Updated.Models.Query>
@{
    ViewData["Title"] = "Queries List";
    string currentUser = ViewData["CurrentUser"] as string;
    var allowedUsers = new List<string> { "4357", "1078", "3961", "4762", "3936", "4654", "4999", "1042", "1830", "1831", "2560", "5110" };
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <title>@ViewData["Title"]</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <!-- Bootstrap Icons CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet">
    <!-- Custom CSS -->
    <style>
        body {
            background-color: #f8f9fa;
            font-family: 'Arial', sans-serif;
        }

        .container {
            max-width: 1400px;
            margin-top: 20px;
        }

        h2 {
            color: orangered;
            text-align: center;
            margin-bottom: 20px;
            font-weight: 600;
        }

        .filters {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-bottom: 20px;
            background-color: #ffffff;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.25);
        }

            .filters div {
                display: flex;
                align-items: center;
                gap: 8px;
            }

            .filters label {
                white-space: nowrap;
                font-weight: 500;
                color: #333;
            }

        .filter-dropdown {
            transition: all 0.3s ease;
            border-radius: 5px;
        }

            .filter-dropdown:focus {
                border-color: orangered;
                box-shadow: 0 0 5px rgba(255, 69, 0, 0.5);
            }

        .btn-success {
            transition: background-color 0.3s ease, transform 0.2s ease;
        }

            .btn-success:hover {
                background-color: #28a745;
                transform: translateY(-2px);
            }

        .table {
            border: 4px double #000000; /* Dark double black border */
            background-color: #ffffff;
            border-radius: 10px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

            .table thead {
                background-color: orangered;
                color: white;
                font-weight: bold;
            }

            .table th, .table td {
                padding: 12px;
                text-align: center;
                vertical-align: middle;
            }

                .table th[data-title="Title"], .table td[data-title="Title"] {
                    max-width: 150px;
                    word-wrap: break-word;
                    white-space: normal;
                    overflow-wrap: break-word;
                }

                .table th[data-title="Created At"], .table td[data-title="Created At"],
                .table th[data-title="Resolved At"], .table td[data-title="Resolved At"] {
                    white-space: nowrap;
                }

            .table tbody tr {
                transition: background-color 0.3s ease;
            }

                .table tbody tr:hover {
                    background-color: #f1f1f1;
                }

        .btn-warning {
            transition: background-color 0.3s ease, transform 0.2s ease;
        }

            .btn-warning:hover {
                background-color: #e0a800;
                transform: translateY(-2px);
            }

        .clock-container {
            position: absolute;
            top: 5px;
            right: 20px;
            background-color: #ffffff;
            padding: 10px 15px;
            border-radius: 5px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            font-size: 16px;
            font-weight: 500;
            color: #333;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .clock-icon {
            font-size: 18px;
            color: orangered;
        }

        /* Edit icon styling */
        .edit-icon {
            font-size: 1.2rem;
            color: #0d6efd; /* Bootstrap primary blue */
            text-decoration: none;
        }

            .edit-icon:hover {
                color: #005cbf; /* Darker blue on hover */
            }

        /* Responsive Table for Mobile */
        @@media (max-width: 768px) {
            #responsive-table table, #responsive-table thead, #responsive-table tbody, #responsive-table th, #responsive-table td, #responsive-table tr

        {
            display: block;
        }

        #responsive-table thead tr {
            position: absolute;
            top: -9999px;
            left: -9999px;
        }

        #responsive-table td {
            border: none;
            border-bottom: 1px solid #eee;
            position: relative;
            padding-left: 50%;
            padding: 12px;
        }

            #responsive-table td:before {
                position: absolute;
                top: 12px;
                left: 6px;
                width: 45%;
                padding-right: 10px;
                white-space: nowrap;
                content: attr(data-title);
                font-weight: bold;
                color: #333;
            }

        .filters {
            flex-direction: column;
            align-items: stretch;
        }

            .filters div {
                width: 100%;
            }

        .filter-dropdown {
            width: 100%;
        }

        .clock-container {
            position: static;
            margin: 10px auto;
            text-align: center;
        }

        .table th[data-title="Title"], .table td[data-title="Title"] {
            max-width: 100px;
        }

        }
    </style>
</head>
<body>
    <div class="container position-relative">
        <!-- Clock Container with Icon -->
        <div class="clock-container" id="clock">
            <i class="bi bi-clock clock-icon"></i>
            <span id="clock-text"></span>
        </div>

        <!-- Title -->
        <h2>@ViewData["Title"]</h2>

        <!-- Filters Section -->
        <div class="filters">
            <div>
                <label for="filterUsername">Username:</label>
                <select id="filterUsername" class="form-select filter-dropdown">
                    <option value="">All</option>
                    @foreach (var username in Model.Select(q => q.USR_NAME).Distinct())
                    {
                        <option value="@username">@username</option>
                    }
                </select>
            </div>
            <div>
                <label for="filterName">Name:</label>
                <select id="filterName" class="form-select filter-dropdown">
                    <option value="">All</option>
                    @foreach (var name in Model.Select(q => q.USR_FULL_NAME).Distinct())
                    {
                        <option value="@name">@name</option>
                    }
                </select>
            </div>
            <div>
                <label for="filterTicketNumber">Ticket Number:</label>
                <select id="filterTicketNumber" class="form-select filter-dropdown">
                    <option value="">All</option>
                    @foreach (var ticket in Model.Select(q => q.TicketNumber).Distinct())
                    {
                        <option value="@ticket">@ticket</option>
                    }
                </select>
            </div>
            <div>
                <label for="filterTitle">Title:</label>
                <select id="filterTitle" class="form-select filter-dropdown">
                    <option value="">All</option>
                    @foreach (var title in Model.Select(q => q.Title).Distinct())
                    {
                        <option value="@title">@title</option>
                    }
                </select>
            </div>
            <div>
                <label for="filterPriority">Priority:</label>
                <select id="filterPriority" class="form-select filter-dropdown">
                    <option value="">All</option>
                    <option value="Low">Low</option>
                    <option value="Medium">Medium</option>
                    <option value="High">High</option>
                </select>
            </div>
            <div>
                <label for="filterCategory">Category:</label>
                <select id="filterCategory" class="form-select filter-dropdown">
                    <option value="">All</option>
                    <option value="Hardware">Hardware</option>
                    <option value="Software">Software</option>
                    <option value="Purchase">Purchase</option>
                    <option value="Others">Others</option>
                </select>
            </div>
            <div>
                <label for="filterAssignedTo">Assigned To:</label>
                <select id="filterAssignedTo" class="form-select filter-dropdown">
                    <option value="">All</option>
                    @foreach (var assigned in Model.Select(q => q.AssignedTo).Distinct())
                    {
                        <option value="@assigned">@assigned</option>
                    }
                </select>
            </div>
            <div>
                <label for="filterStatus">Status:</label>
                <select id="filterStatus" class="form-select filter-dropdown">
                    <option value="">All</option>
                    <option value="New">New</option>
                    <option value="In Progress">In Progress</option>
                    <option value="Resolved">Resolved</option>
                </select>
            </div>
            <div>
                <button id="generateReportBtn" class="btn btn-success">Generate Report</button>
            </div>
        </div>

        <!-- Responsive Table -->
        <div id="responsive-table">
            <table class="table table-bordered" id="queriesTable">
                <thead>
                    <tr>
                        <th data-title="Username">Employee Code</th>
                        <th data-title="Name">Name</th>
                        <th data-title="Ticket Number">Ticket Number</th>
                        <th data-title="Title">Title</th>
                        <th data-title="Description">Description</th>
                        <th data-title="Priority">Priority</th>
                        <th data-title="Category">Category</th>
                        <th data-title="Assigned To">Assigned To</th>
                        <th data-title="Status">Status</th>
                        <th data-title="Created At">Created At</th>
                        <th data-title="Resolved At">Resolved At</th>
                        <th data-title="Actions">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model != null && Model.Any())
                    {
                        @foreach (var query in Model)
                        {
                            <tr>
                                <td data-title="Username">@query.USR_NAME</td>
                                <td data-title="Name">@query.USR_FULL_NAME</td>
                                <td data-title="Ticket Number">@query.TicketNumber</td>
                                <td data-title="Title">@query.Title</td>
                                <td data-title="Description" style="word-wrap: break-word; white-space: normal; max-width: 200px; overflow-wrap: break-word;">@query.Description</td>
                                <td data-title="Priority">@query.Priority</td>
                                <td data-title="Category">@query.Category</td>
                                <td data-title="Assigned To">@query.AssignedTo</td>
                                <td data-title="Status">@query.Status</td>
                                <td data-title="Created At">
                                    <div style="display: block;">@query.CreatedAt.ToString("MMMM dd, yyyy")</div>
                                    <div style="display: block;">@query.CreatedAt.ToString("hh:mm tt")</div>
                                </td>
                                <td data-title="Resolved At">
                                    @if (query.ResolvedAt.HasValue)
                                    {
                                        <div style="display: block;">@query.ResolvedAt.Value.ToString("MMMM dd, yyyy")</div>
                                        <div style="display: block;">@query.ResolvedAt.Value.ToString("hh:mm tt")</div>
                                    }
                                    else
                                    {
                                        <span>Not Resolved</span>
                                    }
                                </td>
                                <td data-title="Actions">
                                    <a asp-action="EditQuery" asp-controller="Query" asp-route-id="@query.QueryId" class="edit-icon"><i class="bi bi-pencil"></i></a>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="12" class="text-center text-muted">No queries available.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <!-- Bootstrap JS and Dependencies -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <!-- jQuery (Required for Existing Script) -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    @section Scripts {
        <script type="text/javascript">
            $(document).ready(function () {
                // Clock Functionality
                function updateClock() {
                    const now = new Date();
                    const options = {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit',
                        second: '2-digit',
                        hour12: true,
                        timeZone: 'Asia/Karachi' // Set to PKT
                    };
                    const formattedDateTime = now.toLocaleString('en-US', options);
                    $('#clock-text').text(formattedDateTime);
                }
                updateClock();
                setInterval(updateClock, 1000); // Update every second

                // Load saved filter values from localStorage
                function loadFiltersFromStorage() {
                    $("#filterUsername").val(localStorage.getItem('usernameFilter') || "");
                    $("#filterName").val(localStorage.getItem('nameFilter') || "");
                    $("#filterTicketNumber").val(localStorage.getItem('ticketNumberFilter') || "");
                    $("#filterTitle").val(localStorage.getItem('titleFilter') || "");
                    $("#filterPriority").val(localStorage.getItem('priorityFilter') || "");
                    $("#filterCategory").val(localStorage.getItem('categoryFilter') || "");
                    $("#filterAssignedTo").val(localStorage.getItem('assignedToFilter') || "");
                    $("#filterStatus").val(localStorage.getItem('statusFilter') || "");
                }

                // Save filter values to localStorage
                function saveFiltersToStorage() {
                    localStorage.setItem('usernameFilter', $("#filterUsername").val());
                    localStorage.setItem('nameFilter', $("#filterName").val());
                    localStorage.setItem('ticketNumberFilter', $("#filterTicketNumber").val());
                    localStorage.setItem('titleFilter', $("#filterTitle").val());
                    localStorage.setItem('priorityFilter', $("#filterPriority").val());
                    localStorage.setItem('categoryFilter', $("#filterCategory").val());
                    localStorage.setItem('assignedToFilter', $("#filterAssignedTo").val());
                    localStorage.setItem('statusFilter', $("#filterStatus").val());
                }

                // Apply filters
                function applyFilters() {
                    var usernameFilter = $("#filterUsername").val().toLowerCase();
                    var nameFilter = $("#filterName").val().toLowerCase();
                    var ticketNumberFilter = $("#filterTicketNumber").val().toLowerCase();
                    var titleFilter = $("#filterTitle").val().toLowerCase();
                    var priorityFilter = $("#filterPriority").val().toLowerCase();
                    var categoryFilter = $("#filterCategory").val().toLowerCase();
                    var assignedToFilter = $("#filterAssignedTo").val().toLowerCase();
                    var statusFilter = $("#filterStatus").val().toLowerCase();

                    $("#queriesTable tbody tr").each(function () {
                        var row = $(this);
                        var username = row.find("td[data-title='Username']").text().toLowerCase();
                        var name = row.find("td[data-title='Name']").text().toLowerCase();
                        var ticketNumber = row.find("td[data-title='Ticket Number']").text().toLowerCase();
                        var title = row.find("td[data-title='Title']").text().toLowerCase();
                        var priority = row.find("td[data-title='Priority']").text().toLowerCase();
                        var category = row.find("td[data-title='Category']").text().toLowerCase();
                        var assignedTo = row.find("td[data-title='Assigned To']").text().toLowerCase();
                        var status = row.find("td[data-title='Status']").text().toLowerCase();

                        if ((username.indexOf(usernameFilter) !== -1 || usernameFilter === "") &&
                            (name.indexOf(nameFilter) !== -1 || nameFilter === "") &&
                            (ticketNumber.indexOf(ticketNumberFilter) !== -1 || ticketNumberFilter === "") &&
                            (title.indexOf(titleFilter) !== -1 || titleFilter === "") &&
                            (priority.indexOf(priorityFilter) !== -1 || priorityFilter === "") &&
                            (category.indexOf(categoryFilter) !== -1 || categoryFilter === "") &&
                            (assignedTo.indexOf(assignedToFilter) !== -1 || assignedToFilter === "") &&
                            (status.indexOf(statusFilter) !== -1 || statusFilter === "")) {
                            row.show();
                        } else {
                            row.hide();
                        }
                    });
                }

                // Event listener for filter changes
                $(".filter-dropdown").on("change", function () {
                    saveFiltersToStorage();
                    applyFilters();
                });

                // Use fetch to generate the report with filters
                $("#generateReportBtn").click(function () {
                    var filters = {
                        username: $("#filterUsername").val(),
                        name: $("#filterName").val(),
                        ticketNumber: $("#filterTicketNumber").val(),
                        title: $("#filterTitle").val(),
                        priority: $("#filterPriority").val(),
                        category: $("#filterCategory").val(),
                        assignedTo: $("#filterAssignedTo").val(),
                        status: $("#filterStatus").val()
                    };

                    fetch('@Url.Action("GenerateReport", "Query")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(filters)
                    })
                    .then(response => response.blob())
                    .then(blob => {
                        var link = document.createElement('a');
                        link.href = URL.createObjectURL(blob);
                        link.download = "QueriesReport.xlsx";
                        link.click();
                    })
                    .catch(error => {
                        alert("There was an error generating the report.");
                    });
                });

                // Reload the page every 10 seconds
                setTimeout(function () {
                    location.reload();
                }, 10000);

                loadFiltersFromStorage();
                applyFilters();
            });
        </script>
    }
</body>
</html>